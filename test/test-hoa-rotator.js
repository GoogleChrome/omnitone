/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Test HOARotator object.
 *
 * Shoot an encoded impulse into the rotator to generate a multichannel buffer.
 * Then compare it with the JS-calculated result. Thresholding the comparison is
 * necessary because of truncation error.
 */
describe('HOARotator', function() {
  // This test is async, override timeout threshold to 5 sec.
  this.timeout(5000);

  // Threshold (percentage of vector normal) for sample comparison.
  var THRESHOLD = 1e-2;
  var sampleRate = 48000;
  var renderLength = 1;

  var context;
  var hoaRotator;
  var source;
  var vectorMagnitude;
  var expectedValues;

  // List of 32 equally-distributed points on the sphere.
  var numberOfSphericalDirections = 32;
  var sphericalDirections = [
    [-1.7573962172583801, 0.16834204524807786],
    [-1.5300370758086719, -0.43468366092441857],
    [-1.2015055833459973, 0.44001649774588264],
    [-2.2374275220549813, -0.10894292562874869],
    [-0.88626109417047694, -0.38242368262347626],
    [-1.8608653864932549, 0.816383879184603],
    [-2.1291229624943862, -0.79531620223039912],
    [-0.58862163634761044, 0.29488259039173847],
    [-2.6204390225307965, 0.34377176088305844],
    [-0.80928094256890826, -0.97486394899444384],
    [-0.88542263998545379, 1.1107197615234463],
    [-2.8149853870546497, -0.501986637962335],
    [-0.22562489825358309, -0.21108314404317008],
    [-2.8731740589529662, 0.94077443485202006],
    [-2.5092307773046034, -1.4115079829545385],
    [-0.040865631015303688, 0.699888279471198],
    [3.110310869537098, 0.041309394393885319],
    [0.13207208567686279, -0.77858572053496689],
    [1.85489230879624, 1.4072940600053563],
    [2.8050134794946904, -0.84683634003337094],
    [0.28752676349299061, 0.12831620669743465],
    [2.7221165824085718, 0.56608012043681954],
    [1.1122249532193753, -1.1006045743136386],
    [0.81796067811830686, 0.873248024845326],
    [2.559480330165647, -0.26043230894574509],
    [0.68252789455083351, -0.34424722071784364],
    [1.9885538529907478, 0.76987598099331467],
    [1.8871930060077926, -0.71317241829334932],
    [0.955210609163505, 0.29465061067149928],
    [2.1222597650047397, 0.13723923933537469],
    [1.3236665383935269, -0.3635343638106901],
    [1.3201406644587657, 0]
  ];

  // 3rd-order spherical harmonics for each of the 32 directions above.
  var ambisonicOrder = 3;
  var numberOfChannels = (ambisonicOrder + 1) * (ambisonicOrder + 1);
  var forwardSphericalHarmonic = [
    1, 0, 0, 1, 0, 0, -0.5, 0, 0.866025403784439, 0, 0, 0, 0,
    -0.612372435695794, 0, 0.790569415042095
  ];

  // Values are computed using ambix SN3D-normalization spherical harmonics.
  // [1] C. Nachbar, F. Zotter, E. Deleflie and A. Sontacchi. "Ambix - A
  //     Suggested Ambisonics Format," Ambisonics Symposium 2011. Lexington, US.

  var sphericalHarmonicsPerDirection = [
    [
      1, -0.96875, 0.16754806234254682, -0.18289637586693197,
      0.30688625878668596, -0.28113295179053971, -0.4578914702078869,
      -0.053076849568271085, -0.78377505518880575, 0.64188857163517243,
      0.11497458605161627, 0.50996817296328822, -0.2395634225558837,
      0.096280083243836023, -0.29364042849032634, 0.40225263160207075
    ],
    [
      1, -0.90625000000000011, -0.42112350185522346, 0.036958540084717023,
      -0.058012750212772621, 0.66102536696133207, -0.23398249427779044,
      -0.026957828989633288, -0.71007425870404306, 0.58547956589347383,
      0.054628331445387535, 0.062863368850558154, 0.4449748801752873,
      -0.0025636836827847777, 0.6686490782293909, -0.071950079245203108
    ],
    [
      1, -0.84375000000000011, 0.42595439137106039, 0.32657126936047109,
      -0.47725708850825388, -0.6224973588802305, -0.22784428470756415,
      0.24093600315621636, -0.52417509857390965, 0.2614592755873596,
      -0.45456970608371594, 0.0479561412560013, -0.44572171694734908,
      -0.018561301242788028, -0.49925737350472932, -0.523865767324964
    ],
    [
      1, -0.78125, -0.10872755418207684, -0.61467613949264677,
      0.8317580498449676, 0.1471262875203555, -0.48226747844237522,
      0.11575682359154854, -0.20137238903931773, -0.32310121546375437,
      -0.20221884875793281, 0.45013756065486332, 0.15987797510904619,
      0.35416168707067969, 0.048958098681167544, 0.70618762048081585
    ],
    [
      1, -0.71875000000000011, -0.37317016611273146, 0.58663656945624887,
      -0.73031062216096954, 0.46456383794537126, -0.2911160406850945,
      -0.37917236338880178, -0.14935395987488584, -0.293103465397139,
      0.60939591042850372, 0.13368019693767022, 0.42983981284271694,
      -0.10910844123234865, 0.12462600103603212, -0.55915832380897423
    ],
    [
      1, -0.65625000000000011, 0.72867406044827909, -0.1958827484231776,
      0.22265176014058419, -0.8282534497478945, 0.29644882955527313,
      -0.24722371371824117, -0.33973657959907916, 0.16371289550422466,
      0.36278092562508213, -0.66502532895988231, -0.12575841972021826,
      -0.19850207879266976, -0.55355480117396016, 0.19413455738675672
    ],
    [
      1, -0.59375000000000022, -0.71408500084886783, -0.37086864125006891,
      0.3814032269376228, 0.73436870454590564, 0.26487608265599139,
      0.45870201874781175, -0.1861915763364046, -0.028207025317481232,
      -0.60900278160604127, -0.56342382100235522, 0.16081660438549808,
      -0.35192627695674183, 0.29730002236983882, 0.26976320298759754
    ],
    [
      1, -0.53125, 0.29062751035526035, 0.79580719255652821,
      -0.73226357309759815, -0.26742148244417296, -0.37330347533705444,
      0.40059470903191, 0.30404638566938386, -0.67941812009271874,
      -0.47587090668674065, 0.18793193877227787, -0.37457210631046456,
      -0.28152016675025288, 0.19758845658710905, -0.13424015553732258
    ],
    [
      1, -0.46875000000000006, 0.33704055675865086, -0.81650297035578434,
      0.66291779493146386, -0.27364282899247733, -0.32960549464972788,
      -0.47665105640302435, 0.38707052022956756, -0.65974428578655,
      0.49960507671761689, 0.12401067568470649, -0.40984440355152535,
      0.2160108481117668, 0.29171399294600914, -0.0048395972174536507
    ],
    [
      1, -0.40625000000000006, -0.82762553302919206, 0.38729435133777224,
      -0.27251798193809013, 0.58235509834443266, 0.52744603438278126,
      -0.55518237553612693, -0.013026882227809067, -0.09151759660418804,
      0.50432912221599224, -0.60323778113114546, -0.17579598689751039,
      0.57509067112768975, 0.024107899348288043, -0.10566998426354765
    ],
    [
      1, -0.34375000000000006, 0.89601850389180115, 0.28104586491086925,
      -0.16733259031595032, -0.53348266580896764, 0.70427373897475221,
      0.43616901011560005, -0.033928523469375908, -0.032283865385798777,
      -0.33526059747718834, -0.63450785758217032, 0.4543915006162032,
      0.5187659916419598, -0.067977774254161571, -0.061213517889552073
    ],
    [
      1, -0.28125, -0.48116803020856297, -0.83028655547660868,
      0.404465202823174, 0.23439585242786259, -0.15271599005781716,
      0.6919670219745192, 0.52851296195098163, -0.44225519286408549,
      -0.43517399043462651, -0.027145710316648773, 0.44324877366815946,
      -0.080137665119204088, -0.56864000424081718, -0.29673907341851347
    ],
    [
      1, -0.21875000000000006, -0.20951912571560971, 0.95302160178002626,
      -0.36108665140486734, 0.079383887383685264, -0.43415260393904975,
      -0.345849414902514, 0.7451270544716555, -0.46293503446235568,
      0.16916873787199541, 0.10455418779069588, 0.2912848738178484,
      -0.45550811209645081, -0.34909128562028141, 0.57614431370342312
    ],
    [
      1, -0.15624999999999992, 0.80801461059513946, -0.56806542454613884,
      0.15373721520892125, -0.21867536856386915, 0.4793314164028224,
      -0.79502026291851369, 0.25832175022924947, -0.11656957354573876,
      0.27776864865242995, -0.21666866359753659, 0.10683490588781255,
      -0.7877246487832269, 0.46672943425701741, -0.11202954228877898
    ],
    [
      1, -0.093750000000000139, -0.98734041315630228, -0.12794469918031817,
      0.020775629956821317, 0.16032410249557169, 0.9622616371774867,
      0.21880127002827079, 0.0065651511334553743, -0.0029883876417100791,
      -0.045867610626234526, -0.22241780927317512, -0.9252393952545982,
      -0.30354325013121841, -0.014494279909565068, 0.0010112227499396724
    ],
    [
      1, -0.031250000000000007, 0.64413223464386127, 0.76427554049093172,
      -0.041367627097264319, -0.03486467991237642, 0.1223595035609417,
      0.85267910669039393, 0.50501452100404054, -0.043268228312395379,
      -0.059582763923547416, -0.020562924413052189, -0.2980619889982028,
      0.50290368543550834, 0.72738426383990051, 0.351160913840685
    ],
    [
      1, 0.031250000000000104, 0.041297646549677214, -0.99865807055741451,
      -0.054053953674817239, 0.002235300689283209, -0.49744175658418671,
      -0.071433634351207073, 0.8628569453928997, 0.073892973292101427,
      -0.0049915769465363634, -0.01897345134969736, -0.061770387437225342,
      0.60633569013451771, 0.0796799594474168, -0.78507800565862951
    ],
    [
      1, 0.093750000000000028, -0.70227328577251058, 0.70570756662393941,
      0.11459262756360578, -0.11403496985215557, 0.23978165186457728,
      -0.858403638233589, 0.42368916513798055, 0.11008287127329412,
      -0.17994833317719786, 0.0841594254145723, 0.18752844297684548,
      0.63351406205639171, -0.6653321480869191, 0.26314197484704271
    ],
    [
      1, 0.15625000000000031, 0.98666325505642094, -0.045624101322307896,
      -0.012347384615610593, 0.2670235762060959, 0.96025656831779749,
      -0.077969348456140161, -0.019340515688923105, -0.0022444002131525569,
      -0.02724136926707782, 0.37005684415250795, 0.92130761560529739,
      -0.10805447009681594, -0.042669937488750719, 0.0025666940817749249
    ],
    [
      1, 0.21875000000000011, -0.74918868668235261, -0.6251917699771582,
      -0.23687648032876465, -0.28385719026648276, 0.34192553237924223,
      0.81126939064432113, 0.29705813355610639, 0.19450969272530685,
      0.39682420433808591, 0.24198143829184579, 0.072514556877620484,
      -0.6915876740905027, -0.49764272639880258, -0.12223485083583861
    ],
    [
      1, 0.28125, 0.12796437436618524, 0.95106443335510715, 0.4633008524557734,
      0.06233647442653048, -0.47543767833960615, 0.21079467992114964,
      0.71483641555380317, 0.585768009547647, 0.13256753444971894,
      -0.15812853934426821, -0.18670805800885576, -0.5347215277110301,
      0.20454117587424162, 0.50167015966099238
    ],
    [
      1, 0.34375000000000017, 0.53632776091770318, -0.77083621500874178,
      -0.458950074243797, 0.31932550767532103, -0.068528799303504487,
      -0.716065936559096, 0.41224923003600145, 0.45231477519370883,
      -0.55040291299062827, 0.092250284722708326, -0.41880833642651422,
      -0.20686504817201803, 0.49439620957426073, -0.14607080346367271
    ],
    [
      1, 0.40625, -0.89148142973586852, 0.20055372830264662,
      0.14111875662119142, -0.62728702168708383, 0.69210870934586233,
      -0.30967323302205, -0.10809492194322765, -0.014251439028485913,
      -0.28130797493883358, 0.73978501898106719, -0.43401581640991449,
      0.36521019987470088, 0.21547783102033349, -0.072124411712686923
    ],
    [
      1, 0.46875, 0.766419314285585, 0.43917521809639221, 0.35656583961004384,
      0.62225493386471831, 0.38109784796497953, 0.58299508542206679,
      -0.023254245943000584, 0.13300023031213981, 0.61107030072751789,
      0.55601297583734222, -0.024144957335336947, 0.52093252251261613,
      -0.039852328751182921, -0.16190033021345823
    ],
    [
      1, 0.53125000000000022, -0.25749830688874431, -0.807135713154504,
      -0.7426875338868123, -0.23693757989695505, -0.40054193292414492,
      0.35998264945549374, 0.31977251648960031, 0.70229787979157321,
      0.4276273897921985, -0.2174695815319086, 0.34356365386901683,
      0.3304046414666702, -0.18411980855271853, 0.12456391686226817
    ],
    [
      1, 0.59375000000000011, -0.33748815938695576, 0.73045374923646256,
      0.7512024099649327, -0.347074566912847, -0.32915261341040697,
      -0.42698428406923872, 0.15677105124389315, 0.58588186635380579,
      -0.56689224392359616, -0.15653130297516224, 0.41013395568677807,
      -0.19257074043128566, -0.11830671979082225, -0.30262805887879518
    ],
    [
      1, 0.65625, 0.69604619870592266, -0.29129989146416724,
      -0.33110845179249931, 0.79116671850158271, 0.2267204660994469,
      -0.35118747311172938, -0.29947889018770552, -0.0913611866485107,
      -0.51533938491276055, 0.57161967447060669, -0.20101760147502351,
      -0.25373371296315478, -0.46611092597662424, 0.27799484020104753
    ],
    [
      1, 0.71875000000000011, -0.65423632797211984, -0.2353152452807864,
      -0.29294665919695795, -0.814466340147349, 0.14203775925766493,
      0.2666523083196074, -0.39943542287234729, -0.19915136982862242,
      0.42855661932741024, 0.50181806270214657, 0.28128044856454237,
      -0.16429278679803083, 0.58434083165528472, 0.27801361440365929
    ],
    [
      1, 0.78125000000000011, 0.29040553592670204, 0.55255141136651265,
      0.74769306115678957, 0.39296651798774751, -0.37349693705468734,
      0.27793178129140983, -0.26417109038940073, 0.18874080409082197,
      0.48552684068374746, -0.27667901544254908, -0.37437965423838176,
      -0.19568560701219534, -0.1715438614854955, -0.666490089609601
    ],
    [
      1, 0.84375000000000022, 0.13680883696061083, -0.51900797646036734,
      -0.75848753089366971, 0.19993487895578096, -0.47192501319422753,
      -0.12298405564526024, -0.38325502427813446, 0.064165379791030777,
      -0.23203184785713463, -0.468335763721013, -0.1988117449532793,
      0.28808295944635687, -0.11724302359856859, 0.76579488768132864
    ],
    [
      1, 0.90625000000000011, -0.35557982599797083, 0.22863491606325745,
      0.358881607474013, -0.55814335682733129, -0.3103444810148791,
      -0.14081220362977284, -0.66598664510553018, -0.47605993561849985,
      -0.285347003811054, -0.20412350411827362, 0.42097361159648289,
      -0.051497666461373208, 0.529526422645662, -0.43589975520752022
    ],
    [
      1, 0.96875000000000022, 0, 0.24803918541230557, 0.41619095667079431, 0,
      -0.49999999999999989, 0, -0.75946368417815013, -0.57738974733848281, 0,
      -0.59323579708030094, -0, -0.15189236011893431, -0, -0.54001951785875579
    ]
  ];

  /**
   * Compute cross-product between two 3-element vectors.
   * @param {Float32Array} a
   * @param {Float32Array} b
   */
  function crossProduct(a, b) {
    return [
      a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2],
      a[0] * b[1] - a[1] * b[0]
    ];
  }

  /**
   * Normalize a 3-element vector.
   * @param {Float32Array} a
   */
  function normalize(a) {
    var n = Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
    a[0] /= n;
    a[1] /= n;
    a[2] /= n;
    return a;
  }

  /**
   * Generate a col-major 3x3 Euler rotation matrix.
   * @param {Number} azimuth
   * @param {Number} elevation
   */
  function generateRotationMatrix(azimuth, elevation) {
    var forward = [
      -Math.sin(azimuth) * Math.cos(elevation), Math.sin(elevation),
      -Math.cos(azimuth) * Math.cos(elevation)
    ];
    var right = normalize(crossProduct([0, 1, 0], forward));
    var up = normalize(crossProduct(forward, right));
    return right.concat(up.concat(forward));
  }

  /**
   * Calculate the expected binaural rendering (based on SH-maxRE algorithm)
   * result from the impulse input and generate an AudioBus instance.
   * @param  {AudioBuffer} buffer     FOA SH-maxRE HRIR buffer.
   * @return {AudioBus}
   */
  function generateExpectedBusFromSphericalHarmonicsVector(index) {
    // We need to determine the number of channels K based on the ambisonic
    // order N where K = (N + 1)^2
    var numberOfChannels = (ambisonicOrder + 1) * (ambisonicOrder + 1);
    var generatedBus = new AudioBus(numberOfChannels, renderLength, sampleRate);

    // Assign all values in each channel to a spherical harmonic coefficient.
    for (var i = 0; i < numberOfChannels; i++) {
      var data = generatedBus.getChannelData(i);
      for (var j = 0; j < data.length; j++) {
        data[j] = sphericalHarmonicsPerDirection[index][i];
      }
    }

    return generatedBus;
  }

  /**
   * TODO: describe this test.
   * @param {Function} done Test runner callback.
   * @param {Number} index Direction idex.
   */
  function computeRotationAndTest(index) {
    it('#setRotationMatrix: rotate the incoming stream using direction [' +
        sphericalDirections[index] + '].',
      function(done) {
        hoaRotator.setRotationMatrix3(generateRotationMatrix(
          sphericalDirections[index][0], sphericalDirections[index][1]));
        expectedValues = sphericalHarmonicsPerDirection[index];
        context.startRendering().then(function(renderedBuffer) {
          var vectorNomal = 0;
          var numberOfChannels = renderedBuffer.numberOfChannels;
          for (var channel = 0; channel < numberOfChannels; ++channel) {
            var channelData = renderedBuffer.getChannelData(channel);
            for (var i = 0; i < channelData.length; ++i)
              vectorNomal +=
                Math.abs(channelData[i] - expectedValues[channel]);
          }
          vectorNomal /= renderedBuffer.getChannelData(0).length *
              renderedBuffer.numberOfChannels * vectorMagnitude;
          expect(vectorNomal).to.be.below(THRESHOLD);
          done();
        });
    });
  }


  beforeEach(function() {
    context =
        new OfflineAudioContext(numberOfChannels, renderLength, sampleRate);
    hoaRotator = Omnitone.createHOARotator(context, ambisonicOrder);
    source = context.createBufferSource();
    source.buffer =
        createConstantBuffer(context, forwardSphericalHarmonic, renderLength);

    source.connect(hoaRotator.input);
    hoaRotator.output.connect(context.destination);
    source.start();

    vectorMagnitude = 0;
    for (var i = 0; i < numberOfChannels; ++i)
      vectorMagnitude += Math.pow(forwardSphericalHarmonic[i], 2);
    vectorMagnitude = Math.sqrt(vectorMagnitude);
  });

  for (var index = 0; index < numberOfSphericalDirections; ++index)
    computeRotationAndTest(index);
});
